import mujoco as mjc
import mujoco_viewer as mjcv
import numpy as np
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt

old_robot_path = 'Mugatu/mugatu.xml'
new_robot_path = 'Mugatu/mugatu2.xml'
new_scene_path = 'Mugatu/scene2.xml'

# solref = '0.01 1'
# solimp = "0.7 0.9 0.001 0.5 2"
new_foot_mass = '0.13'
# condim = '3'
# new_friction_params = '1 0.005 0.0001'
# new_friction_params = '1 0.9 0.001'

com_height = 0.066
joint_height = 0.15

leg_amp_deg = 42.2
leg_amp_rad = np.deg2rad(leg_amp_deg)

hip_freq = 1.65
hip_omega = 2*np.pi*hip_freq
# hip_omega = np.sqrt(9.81/(joint_height - com_height))

# hip_params = 100
# leg_params = 50

hip_params = 50
leg_params = 100

leg_amp_range_deg = np.linspace(leg_amp_deg / 4, leg_amp_deg * 1.5, leg_params)
leg_amp_range = np.linspace(leg_amp_rad / 4, leg_amp_rad * 1.5, leg_params)
hip_freq_range = 2*np.pi*np.linspace(1, 2, hip_params)

robot_tree = ET.parse(old_robot_path)
robot_root = robot_tree.getroot()

right_foot_body = robot_root.find(".//body[@name='right_foot']")
left_foot_body = robot_root.find(".//body[@name='left_foot']")
right_foot_body.find('inertial').set('mass', new_foot_mass)
left_foot_body.find('inertial').set('mass', new_foot_mass)

# default_element = robot_root.find(".//default")
# default_element.find('geom').set('solref', solref)
# default_element.find('geom').set('solimp', solimp)

# right_foot_geom = robot_root.find(".//geom[@name='right_foot_geom_c']")
# left_foot_geom = robot_root.find(".//geom[@name='left_foot_geom_c']")
# right_foot_geom.set('condim', condim)
# left_foot_geom.set('condim', condim)
# right_foot_geom.set('friction', new_friction_params)
# left_foot_geom.set('friction', new_friction_params)

robot_tree.write(new_robot_path)

noise_amp = 0

max_time_range = 25

dists = np.zeros((len(leg_amp_range)+1, len(hip_freq_range)+1))
dists[0, 1:] = hip_freq_range / (2*np.pi)
dists[1:, 0] = leg_amp_range_deg

count = 0

for cnt_leg, leg_amp_val in enumerate(leg_amp_range):
    for cnt_hip, hip_freq_val in enumerate(hip_freq_range):
        count += 1
        failed = False
        model = mjc.MjModel.from_xml_path(new_scene_path)
        data = mjc.MjData(model)
        # model.opt.iterations = 550  # Set the number of solver iterations
        # model.opt.solver = 0  # Set solver to PGS
        model.opt.timestep = 0.001  # Set a custom timestep

        mjc.mj_step(model, data)
        trial_init_pos = data.qpos.copy()
        while data.time < max_time_range:
            mjc.mj_step(model, data)
            if data.time > 3:
                actuator_noise = noise_amp * leg_amp_rad * np.random.rand()
                # data.actuator("hip_joint_act").ctrl = leg_amp_rad * \
                #     np.sin(hip_omega*data.time) + actuator_noise
                data.actuator("hip_joint_act").ctrl = leg_amp_val * \
                    np.sin(hip_freq_val*data.time) + actuator_noise

            if data.qpos[2] < joint_height / 3:
                print(f"fell! ({count}/{leg_params*hip_params})")
                failed = True
                dists[cnt_leg+1, cnt_hip+1] = 0
                break

            # data.joint("").xanchor to find joint location
            # data.subtree_com() to find com location
            # viewer.render()
        if not failed:
            print(f"done! ({count}/{leg_params*hip_params})")
            dists[cnt_leg+1, cnt_hip +
                  1] = np.linalg.norm(data.qpos[0:2] - trial_init_pos[0:2])


np.savetxt('my_array.csv', dists, delimiter=',')
