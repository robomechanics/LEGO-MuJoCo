import mujoco as mjc
import mujoco_viewer as mjcv
import numpy as np
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt

old_robot_path = 'Mugatu/mugatu.xml'
new_robot_path = 'Mugatu/mugatu2.xml'
new_scene_path = 'Mugatu/scene2.xml'

# solref = '0.01 1'
# solimp = "0.7 0.9 0.001 0.5 2"
new_foot_mass = '0.13'
# condim = '3'
# new_friction_params = '1 0.005 0.0001'
# new_friction_params = '1 0.9 0.001'

com_height = 0.066
joint_height = 0.15

# leg_amp_deg = 26.5348  # 42.2
# leg_amp_deg = 42.2
# hip_freq = 1.5792

leg_amp_deg, hip_freq = 42.2, 1.45

f_slide, f_spin, f_roll = 1, 0.5, 0.1

# This param seems pretty good
# solref_stiff, solref_damp, hip_freq = 0.05, 0.5071, 1.8

# solref_stiff, solref_damp, hip_freq = 0.1721, 0.5071, 1.6857
solref_stiff, solref_damp = 0.005, 25
solimp_vals = [0.99, 0.999, 0.0001, 0.5, 2]

# This one looks REALLY GOOD, but stick slipping
# f_slide, leg_amp_deg = 1, 23.0929
# solref_stiff, solref_damp, hip_freq = 0.1164, 0.5071, 1.9596
round_to = 4
leg_amp_rad = np.round(np.deg2rad(leg_amp_deg), round_to)
hip_omega = np.round(2*np.pi*hip_freq, round_to)
# hip_omega = np.sqrt(9.81/(joint_height - com_height))

robot_tree = ET.parse(old_robot_path)
robot_root = robot_tree.getroot()

right_foot_body = robot_root.find(".//body[@name='right_foot']")
left_foot_body = robot_root.find(".//body[@name='left_foot']")
right_foot_body.find('inertial').set('mass', new_foot_mass)
left_foot_body.find('inertial').set('mass', new_foot_mass)

# default_element = robot_root.find(".//default")
# default_element.find('geom').set('solref', solref)
# default_element.find('geom').set('solimp', solimp)

# right_foot_geom = robot_root.find(".//geom[@name='right_foot_geom_c']")
# left_foot_geom = robot_root.find(".//geom[@name='left_foot_geom_c']")
# right_foot_geom.set('condim', condim)
# left_foot_geom.set('condim', condim)
# right_foot_geom.set('friction', new_friction_params)
# left_foot_geom.set('friction', new_friction_params)

robot_tree.write(new_robot_path)

model = mjc.MjModel.from_xml_path(new_scene_path)
data = mjc.MjData(model)

# for item in model.geom_friction:
#     item[0] = 2

model.opt.timestep = 0.001  # Set a custom timestep
model.opt.enableflags |= 1 << 0  # enable override
model.opt.cone = 1
roll_mult = 1
model.opt.o_friction = [f_slide, f_slide, f_spin,
                        roll_mult * f_roll, roll_mult * f_roll]
model.opt.solver = 1
model.opt.o_solref[0] = solref_stiff
model.opt.o_solref[1] = solref_damp
model.opt.o_solimp[:] = solimp_vals

viewer = mjcv.MujocoViewer(model, data, width=int(1920/2), height=int(1080/2))


mjc.mj_step(model, data)
max_time_range = 50
wait_time = 3

# store actuator setpoints empty array and append later
actuator_setpoints = np.zeros((0, 1))
# store actuator actual pos empty array and append later
actuator_actual_pos = np.zeros((0, 1))

while data.time < max_time_range:
    if viewer.is_alive:
        mjc.mj_step(model, data)
        if data.time > wait_time:
            # acutator_control = leg_amp_rad * \
            #     np.sin(np.pi/2*np.cos(hip_omega*(data.time-wait_time)))

            b = 1
            wave = np.cos(hip_omega*(data.time-wait_time))
            wave_val = np.sqrt((1+b**2)/(1+(b**2)*wave**2))*wave
            acutator_control = leg_amp_rad * wave_val

            data.actuator("hip_joint_act").ctrl = acutator_control
            actuator_setpoints = np.append(
                actuator_setpoints, acutator_control)
            actuator_actual_pos = np.append(actuator_actual_pos, data.qpos[7])

        # data.joint("").xanchor to find joint location
        # data.subtree_com() to find com location
        viewer.render()
    else:
        break
print("done!")

viewer.close()

# plot actuator setpoints and actual pos
plt.plot(actuator_setpoints, label='setpoints')
plt.plot(actuator_actual_pos, label='actual pos')
plt.legend()
plt.show()
